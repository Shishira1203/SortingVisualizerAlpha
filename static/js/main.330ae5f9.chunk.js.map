{"version":3,"sources":["App.tsx","algorithms/heapSort.ts","algorithms/quickSort.ts","algorithms/mergeSort.ts","algorithms/bubbleSort.ts","algorithms/selectionSort.ts","algorithms/insertionSort.ts","algorithms/coutingSort.ts","reportWebVitals.ts","index.tsx"],"names":["SwapType","buttonType","heapRoot","array","i","arrayLength","animations","left","right","max","height","push","CHANGE_COLOR","RESET","SWAP","temp","quickSortHelper","start","end","pivot","j","piv","COPY","partition","mergeSortHelper","tempArray","mid","Math","floor","k","doMerge","DEFUALT_COLOR","App","useState","arrayBarGraph","setArrayBarGraph","arraySize","setArraySize","animationSpeed","setAnimationSpeed","disabled","setDisabled","animationArray","setAnimationArray","animArrIdx","setAnimArrIdx","timeouts","setTimeouts","PLAY","buttonState","setButtonState","mode","theme","setTheme","GlobalStyle","createGlobalStyle","props","useEffect","buildArray","randomIntFromInterval","color","handleAnimations","newTimeouts","length","setTimeout","PAUSE","newArrayBarGraph","barOneIdx","barTwoIdx","swapType","min","random","Navbar","NavbarBrand","href","className","onClick","window","location","reload","onChange","checked","size","Button","resetArray","id","style","width","minValue","maxValue","value","val","onChangeComplete","ButtonGroup","bubbleSortHelper","minIdx","selectionSortHelper","elementToInsert","insertionSortHelper","currentArray","slice","heapSortHelper","countArray","countingSortHelper","map","idx","backgroundColor","icon","faPlay","leftAnimations","clearTimeout","pop","faPause","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.330ae5f9.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { Navbar, NavbarBrand, Button, ButtonGroup } from \"reactstrap\";\r\nimport \"./App.css\";\r\nimport { heapSortHelper } from \"./algorithms/heapSort\";\r\nimport { countingSortHelper } from \"./algorithms/coutingSort\";\r\nimport { quickSortHelper } from \"./algorithms/quickSort\";\r\nimport { mergeSortHelper } from \"./algorithms/mergeSort\";\r\nimport { selectionSortHelper } from \"./algorithms/selectionSort\";\r\nimport { insertionSortHelper } from \"./algorithms/insertionSort\";\r\nimport { bubbleSortHelper } from \"./algorithms/bubbleSort\";\r\nimport {\r\n  ThemeProvider,\r\n  createGlobalStyle,\r\n  ThemeProps,\r\n} from \"styled-components\";\r\nimport DarkModeToggle from \"react-dark-mode-toggle\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPlay, faPause } from \"@fortawesome/free-solid-svg-icons\";\r\nimport InputRange from \"react-input-range\";\r\nimport \"react-input-range/lib/css/index.css\";\r\n\r\nexport type ArrayBar = {\r\n  height: number;\r\n  color: string;\r\n};\r\n\r\nexport type ThemeType = {\r\n  mode: string;\r\n};\r\n\r\nexport enum SwapType {\r\n  SWAP,\r\n  CHANGE_COLOR,\r\n  RESET,\r\n  COPY,\r\n}\r\n\r\nenum buttonType {\r\n  PLAY,\r\n  PAUSE,\r\n}\r\n\r\nconst DEFUALT_COLOR = \"teal\";\r\nconst SWAP_COLOR = \"red\";\r\n\r\nexport default function App() {\r\n  const [arrayBarGraph, setArrayBarGraph] = useState<Array<ArrayBar>>([]);\r\n  const [arraySize, setArraySize] = useState<number | any>(100);\r\n  const [animationSpeed, setAnimationSpeed] = useState<number | any>(0);\r\n  const [disabled, setDisabled] = useState<boolean>(false);\r\n  const [animationArray, setAnimationArray] = useState<Array<any>>([]);\r\n  const [animArrIdx, setAnimArrIdx] = useState<number>(0);\r\n  const [timeouts, setTimeouts] = useState<Array<any>>([]);\r\n  const [buttonState, setButtonState] = useState<buttonType>(buttonType.PLAY);\r\n  const [theme, setTheme] = useState<ThemeType>({ mode: \"light\" });\r\n  const GlobalStyle = createGlobalStyle`\r\n    body{\r\n      background-color: ${(props: ThemeProps<ThemeType>) =>\r\n        props.theme.mode === \"dark\" ? \"#111\" : \"#EEE\"};\r\n      color: ${(props: ThemeProps<ThemeType>) =>\r\n        props.theme.mode === \"dark\" ? \"#111\" : \"#EEE\"};\r\n    }\r\n  `;\r\n\r\n  useEffect(() => {\r\n    const buildArray = [];\r\n    for (let i = 0; i < arraySize; i++)\r\n      buildArray.push({\r\n        height: randomIntFromInterval(5, 500),\r\n        color: DEFUALT_COLOR,\r\n      });\r\n    setArrayBarGraph(buildArray);\r\n  }, [arraySize]);\r\n\r\n  const handleAnimations = () => {\r\n    const newTimeouts: Array<any> = [];\r\n    const animations = [...animationArray];\r\n    for (let i = animArrIdx; i <= animations.length; i++) {\r\n      if (i === animations.length) {\r\n        newTimeouts.push(\r\n          setTimeout(() => {\r\n            setTimeouts(newTimeouts);\r\n            setAnimationArray([]);\r\n            setButtonState(buttonType.PLAY);\r\n            setDisabled(false);\r\n            setAnimArrIdx(0);\r\n          }, -animationSpeed * (i - animArrIdx))\r\n        );\r\n        return;\r\n      } else if (i === animArrIdx) {\r\n        newTimeouts.push(\r\n          setTimeout(() => {\r\n            setDisabled(true);\r\n            setButtonState(buttonType.PAUSE);\r\n          }, -animationSpeed * (i - animArrIdx))\r\n        );\r\n      }\r\n      const newArrayBarGraph = [...arrayBarGraph];\r\n      const [barOneIdx, barTwoIdx, swapType] = animations[i];\r\n      if (swapType === SwapType.SWAP) {\r\n        newTimeouts.push(\r\n          setTimeout(() => {\r\n            const temp = newArrayBarGraph[barOneIdx].height;\r\n            newArrayBarGraph[barOneIdx].height =\r\n              newArrayBarGraph[barTwoIdx].height;\r\n            newArrayBarGraph[barTwoIdx].height = temp;\r\n            setArrayBarGraph(newArrayBarGraph);\r\n            setTimeouts(newTimeouts);\r\n            setAnimArrIdx(i);\r\n          }, -animationSpeed * (i - animArrIdx))\r\n        );\r\n      } else if (swapType === SwapType.COPY) {\r\n        newTimeouts.push(\r\n          setTimeout(() => {\r\n            newArrayBarGraph[barOneIdx].height = barTwoIdx;\r\n            setArrayBarGraph(newArrayBarGraph);\r\n            setTimeouts(newTimeouts);\r\n            setAnimArrIdx(i);\r\n          }, -animationSpeed * (i - animArrIdx))\r\n        );\r\n      } else {\r\n        newTimeouts.push(\r\n          setTimeout(() => {\r\n            const color =\r\n              swapType === SwapType.RESET ? DEFUALT_COLOR : SWAP_COLOR;\r\n            newArrayBarGraph[barOneIdx].color = color;\r\n            newArrayBarGraph[barTwoIdx].color = color;\r\n            setArrayBarGraph(newArrayBarGraph);\r\n            setTimeouts(newTimeouts);\r\n            setAnimArrIdx(i);\r\n          }, -animationSpeed * (i - animArrIdx))\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    handleAnimations();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [animationArray.length]);\r\n\r\n  const randomIntFromInterval = (min: number, max: number) =>\r\n    Math.floor(Math.random() * (max - min + 1) + min);\r\n\r\n  const handleAnimationState = () => {\r\n    setDisabled(false);\r\n    setButtonState(buttonType.PLAY);\r\n    let leftAnimations = [...timeouts];\r\n    while (leftAnimations.length) {\r\n      clearTimeout(leftAnimations.pop());\r\n    }\r\n    setTimeouts([]);\r\n  };\r\n  const resetArray = () => {\r\n    const buildArray = [];\r\n    setAnimationArray([]);\r\n    setAnimArrIdx(0);\r\n    for (let i = 0; i < arraySize; i++)\r\n      buildArray.push({\r\n        height: randomIntFromInterval(5, 500),\r\n        color: DEFUALT_COLOR,\r\n      });\r\n    setArrayBarGraph(buildArray);\r\n  };\r\n\r\n  const heapSort = () => {\r\n    const currentArray = [...arrayBarGraph];\r\n    const animations: Array<any> = [];\r\n    heapSortHelper(currentArray, animations);\r\n    setAnimationArray(animations);\r\n    setAnimArrIdx(0);\r\n  };\r\n\r\n  const countingSort = () => {\r\n    const currentArray = [...arrayBarGraph];\r\n    const animations: Array<any> = [];\r\n    countingSortHelper(currentArray, 1, 700, animations);\r\n    setAnimationArray(animations);\r\n    setAnimArrIdx(0);\r\n  };\r\n\r\n  const quickSort = () => {\r\n    const currentArray = [...arrayBarGraph];\r\n    if (currentArray.length <= 1) return currentArray;\r\n    const animations: Array<any> = [];\r\n    quickSortHelper(currentArray, 0, currentArray.length, animations);\r\n    setAnimationArray(animations);\r\n    setAnimArrIdx(0);\r\n  };\r\n\r\n  const mergeSort = () => {\r\n    const currentArray = [...arrayBarGraph];\r\n    const tempArray = currentArray.slice();\r\n    const animations: Array<any> = [];\r\n    mergeSortHelper(\r\n      currentArray,\r\n      0,\r\n      currentArray.length - 1,\r\n      tempArray,\r\n      animations\r\n    );\r\n    setAnimationArray(animations);\r\n    setAnimArrIdx(0);\r\n  };\r\n\r\n  const selectionSort = () => {\r\n    const currentArray = [...arrayBarGraph];\r\n    const animations = selectionSortHelper(currentArray);\r\n    setAnimationArray(animations);\r\n    setAnimArrIdx(0);\r\n  };\r\n\r\n  const insertionSort = () => {\r\n    const currentArray = [...arrayBarGraph];\r\n    const animations = insertionSortHelper(currentArray);\r\n    setAnimationArray(animations);\r\n    setAnimArrIdx(0);\r\n  };\r\n\r\n  const bubbleSort = () => {\r\n    const currentArray = [...arrayBarGraph];\r\n    const animations = bubbleSortHelper(currentArray);\r\n    setAnimationArray(animations);\r\n    setAnimArrIdx(0);\r\n  };\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <>\r\n        <GlobalStyle />\r\n        <Navbar color=\"dark\">\r\n          <NavbarBrand\r\n            href=\"#\"\r\n            className=\"text-white\"\r\n            onClick={() => window.location.reload()}\r\n          >\r\n            SortingVisualizer\r\n          </NavbarBrand>\r\n          <DarkModeToggle\r\n            onChange={() =>\r\n              setTheme(\r\n                theme.mode === \"dark\" ? { mode: \"light\" } : { mode: \"dark\" }\r\n              )\r\n            }\r\n            checked={theme.mode === \"dark\"}\r\n            size={70}\r\n          ></DarkModeToggle>\r\n          <Button\r\n            onClick={() => resetArray()}\r\n            className=\"btn bg-transparent  text-white\"\r\n            disabled={disabled}\r\n          >\r\n            Generate New Array\r\n          </Button>\r\n          <div id=\"len\" style={{ width: 150 }} className=\"text-white\">\r\n            Array Length\r\n            <InputRange\r\n              minValue={2}\r\n              maxValue={100}\r\n              value={arraySize}\r\n              onChange={(val) => {\r\n                setArraySize(val);\r\n              }}\r\n              onChangeComplete={(val) => setArraySize(val)}\r\n              disabled={disabled}\r\n            ></InputRange>\r\n          </div>\r\n          <div id=\"ani\" style={{ width: 150 }} className=\"text-white\">\r\n            Animation Speed\r\n            <InputRange\r\n              minValue={-800}\r\n              maxValue={0}\r\n              value={animationSpeed}\r\n              onChange={(val) => {\r\n                setAnimationSpeed(val);\r\n              }}\r\n              onChangeComplete={(val) => {\r\n                setAnimationSpeed(val);\r\n              }}\r\n              disabled={disabled}\r\n            ></InputRange>\r\n          </div>\r\n          <ButtonGroup>\r\n            <Button\r\n              onClick={bubbleSort}\r\n              className=\"btn bg-transparent  text-white\"\r\n              disabled={disabled}\r\n            >\r\n              Bubble Sort\r\n            </Button>\r\n            <Button\r\n              onClick={selectionSort}\r\n              className=\"btn bg-transparent  text-white\"\r\n              disabled={disabled}\r\n            >\r\n              Selection Sort\r\n            </Button>\r\n            <Button\r\n              onClick={insertionSort}\r\n              className=\"btn bg-transparent  text-white\"\r\n              disabled={disabled}\r\n            >\r\n              Insertion Sort\r\n            </Button>\r\n            <Button\r\n              onClick={mergeSort}\r\n              className=\"btn bg-transparent  text-white\"\r\n              disabled={disabled}\r\n            >\r\n              Merge Sort\r\n            </Button>\r\n            <Button\r\n              onClick={heapSort}\r\n              className=\"btn bg-transparent  text-white\"\r\n              disabled={disabled}\r\n            >\r\n              Heap Sort\r\n            </Button>\r\n            <Button\r\n              onClick={quickSort}\r\n              className=\"btn bg-transparent  text-white\"\r\n              disabled={disabled}\r\n            >\r\n              Quick Sort\r\n            </Button>\r\n            <Button\r\n              onClick={countingSort}\r\n              className=\"btn bg-transparent  text-white\"\r\n              disabled={disabled}\r\n            >\r\n              Counting Sort\r\n            </Button>\r\n          </ButtonGroup>\r\n        </Navbar>\r\n        <div className=\"array-container\">\r\n          {arrayBarGraph.map((value, idx) => (\r\n            <div\r\n              className=\"array-bar-graph\"\r\n              key={idx}\r\n              style={{\r\n                backgroundColor: value.color,\r\n                height: `${value.height}px`,\r\n                width: `${1000 / arrayBarGraph.length}px`,\r\n              }}\r\n            ></div>\r\n          ))}\r\n        </div>\r\n        <div className=\"center-div\">\r\n          {buttonState === buttonType.PLAY ? (\r\n            <Button onClick={handleAnimations}>\r\n              <FontAwesomeIcon icon={faPlay} size=\"lg\" />\r\n            </Button>\r\n          ) : (\r\n            <Button onClick={handleAnimationState}>\r\n              <FontAwesomeIcon icon={faPause} size=\"lg\" />\r\n            </Button>\r\n          )}\r\n        </div>\r\n      </>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n","import { ArrayBar, SwapType } from \"../App\";\r\n\r\nconst heapRoot = (\r\n  array: Array<ArrayBar>,\r\n  i: number,\r\n  arrayLength: number,\r\n  animations: Array<any>\r\n) => {\r\n  let left = 2 * i + 1;\r\n  let right = 2 * i + 2;\r\n  let max = i;\r\n  if (left < arrayLength && array[left].height > array[max].height) {\r\n    animations.push([left, max, SwapType.CHANGE_COLOR]);\r\n    animations.push([left, max, SwapType.RESET]);\r\n    max = left;\r\n  }\r\n  if (right < arrayLength && array[right].height > array[max].height) {\r\n    animations.push([right, max, SwapType.CHANGE_COLOR]);\r\n    animations.push([right, max, SwapType.RESET]);\r\n    max = right;\r\n  }\r\n  if (max !== i) {\r\n    animations.push([max, i, SwapType.CHANGE_COLOR]);\r\n    animations.push([max, i, SwapType.RESET]);\r\n    animations.push([i, max, SwapType.SWAP]);\r\n    let temp = array[i];\r\n    array[i] = array[max];\r\n    array[max] = temp;\r\n    heapRoot(array, max, arrayLength, animations);\r\n  }\r\n};\r\n\r\nexport const heapSortHelper = (\r\n  array: Array<ArrayBar>,\r\n  animations: Array<any>\r\n) => {\r\n  let arrayLength = array.length;\r\n  for (let i = Math.floor(arrayLength / 2); i >= 0; i -= 1) {\r\n    heapRoot(array, i, arrayLength, animations);\r\n  }\r\n  for (let i = array.length - 1; i > 0; i--) {\r\n    animations.push([0, i, SwapType.SWAP]);\r\n    let temp = array[0];\r\n    array[0] = array[i];\r\n    array[i] = temp;\r\n    arrayLength--;\r\n    heapRoot(array, 0, arrayLength, animations);\r\n  }\r\n  return animations;\r\n};\r\n","import { ArrayBar, SwapType } from \"../App\";\r\n\r\nconst partition = (\r\n  array: Array<ArrayBar>,\r\n  start: number,\r\n  end: number,\r\n  animations: Array<any>\r\n) => {\r\n  let i = start,\r\n    j = end;\r\n  let piv = array[start];\r\n  while (i < j) {\r\n    while (i < j && array[--j].height >= piv.height) {\r\n      animations.push([i, j, SwapType.CHANGE_COLOR]);\r\n      animations.push([i, j, SwapType.RESET]);\r\n    }\r\n    if (i < j) {\r\n      animations.push([i, array[j].height,SwapType.COPY]);\r\n      array[i] = array[j];\r\n    }\r\n    while (i < j && array[++i].height <= piv.height) {\r\n      animations.push([i, j, SwapType.CHANGE_COLOR]);\r\n      animations.push([i, j, SwapType.RESET]);\r\n    }\r\n    if (i < j) {\r\n      animations.push([j, array[i].height,SwapType.COPY]);\r\n      array[j] = array[i];\r\n    }\r\n  }\r\n  animations.push([j, piv.height,SwapType.COPY]);\r\n  array[j] = piv;\r\n  return j;\r\n};\r\n\r\nexport const quickSortHelper = (\r\n  array: Array<ArrayBar>,\r\n  start: number,\r\n  end: number,\r\n  animations: Array<any>\r\n) => {\r\n  if (end - start < 2) return;\r\n  const pivot = partition(array, start, end, animations);\r\n  quickSortHelper(array, start, pivot, animations);\r\n  quickSortHelper(array, pivot + 1, end, animations);\r\n};\r\n","import { ArrayBar, SwapType } from \"../App\";\r\n\r\nconst doMerge = (\r\n  array: Array<ArrayBar>,\r\n  start: number,\r\n  mid: number,\r\n  end: number,\r\n  tempArray: Array<ArrayBar>,\r\n  animations: Array<any>\r\n) => {\r\n  let k = start;\r\n  let i = start;\r\n  let j = mid + 1;\r\n  while (i <= mid && j <= end) {\r\n    animations.push([i, j, SwapType.CHANGE_COLOR]);\r\n    animations.push([i, j, SwapType.RESET]);\r\n    if (tempArray[i].height <= tempArray[j].height) {\r\n      animations.push([k, i, SwapType.CHANGE_COLOR]);\r\n      animations.push([k, tempArray[i].height, SwapType.COPY]);\r\n      animations.push([k, i, SwapType.RESET]);\r\n      array[k++] = tempArray[i++];\r\n    } else {\r\n      animations.push([k, i, SwapType.CHANGE_COLOR]);\r\n      animations.push([k, tempArray[j].height, SwapType.COPY]);\r\n      animations.push([k, i, SwapType.RESET]);\r\n      array[k++] = tempArray[j++];\r\n    }\r\n  }\r\n  while (i <= mid) {\r\n    animations.push([k, i, SwapType.CHANGE_COLOR]);\r\n    animations.push([k, tempArray[i].height, SwapType.COPY]);\r\n    animations.push([k, i, SwapType.RESET]);\r\n    array[k++] = tempArray[i++];\r\n  }\r\n  while (j <= end) {\r\n    animations.push([k, j, SwapType.CHANGE_COLOR]);\r\n    animations.push([k, tempArray[j].height, SwapType.COPY]);\r\n    animations.push([k, j, SwapType.RESET]);\r\n    array[k++] = tempArray[j++];\r\n  }\r\n};\r\n\r\nexport const mergeSortHelper = (\r\n  array: Array<ArrayBar>,\r\n  start: number,\r\n  end: number,\r\n  tempArray: Array<ArrayBar>,\r\n  animations: Array<any>\r\n) => {\r\n  if (start === end) return;\r\n  const mid = Math.floor((start + end) / 2);\r\n  mergeSortHelper(tempArray, start, mid, array, animations);\r\n  mergeSortHelper(tempArray, mid + 1, end, array, animations);\r\n  doMerge(array, start, mid, end, tempArray, animations);\r\n};\r\n","import { ArrayBar,SwapType } from \"../App\";\r\nexport const bubbleSortHelper = (array: Array<ArrayBar>): Array<any> => {\r\n  const animations = [];\r\n  for (let i = 0; i < array.length - 1; i++) {\r\n    for (let j = 0; j < array.length - i - 1; j++) {\r\n      animations.push([j, j + 1, SwapType.CHANGE_COLOR]);\r\n      if (array[j].height > array[j + 1].height) {\r\n        animations.push([j, j+1, SwapType.SWAP]);\r\n        const temp = array[j];\r\n        array[j] = array[j + 1];\r\n        array[j + 1] = temp;\r\n      }\r\n      animations.push([j, j + 1,SwapType.RESET]);\r\n    }\r\n  }\r\n  return animations;\r\n};\r\n","import { ArrayBar, SwapType } from \"../App\";\r\n\r\nexport const selectionSortHelper = (array: Array<ArrayBar>) => {\r\n  const animations: Array<any> = [];\r\n  for (let i = 0; i < array.length - 1; i++) {\r\n    let minIdx = i;\r\n    for (let j = i + 1; j < array.length; j++) {\r\n      animations.push([j, minIdx, SwapType.CHANGE_COLOR]);\r\n      if (array[j].height < array[minIdx].height) minIdx = j;\r\n      animations.push([j, minIdx, SwapType.RESET]);\r\n    }\r\n    animations.push([i, minIdx, SwapType.RESET]);\r\n    let temp = array[minIdx];\r\n    animations.push([minIdx, i, SwapType.SWAP]);\r\n    array[minIdx] = array[i];\r\n    array[i] = temp;\r\n  }\r\n  return animations;\r\n};\r\n","import { ArrayBar, SwapType } from \"../App\";\r\n\r\nexport const insertionSortHelper = (array: Array<ArrayBar>) => {\r\n  const animations = [];\r\n  for (let i = 1; i < array.length; i++) {\r\n    let elementToInsert = array[i];\r\n    let j;\r\n    for (j = i; j > 0 && array[j - 1].height > elementToInsert.height; j--) {\r\n      animations.push([j - 1, j, SwapType.CHANGE_COLOR]);\r\n      array[j] = array[j - 1];\r\n      animations.push([j, array[j-1].height, SwapType.COPY]);\r\n      animations.push([j - 1, j, SwapType.RESET]);\r\n    }\r\n    animations.push([j, elementToInsert.height, SwapType.COPY]);\r\n    array[j] = elementToInsert;\r\n  }\r\n  return animations;\r\n};\r\n","import { ArrayBar, SwapType } from \"../App\";\r\n\r\nexport const countingSortHelper = (\r\n  array: Array<ArrayBar>,\r\n  min: number,\r\n  max: number,\r\n  animations: Array<any>\r\n) => {\r\n  let countArray = [];\r\n  for (let i = min; i <= max; i++) {\r\n    countArray[i] = 0;\r\n  }\r\n  for (let i = 0; i < array.length; i++) {\r\n    countArray[array[i].height]++;\r\n    animations.push([i, i, SwapType.CHANGE_COLOR]);\r\n    animations.push([i, i, SwapType.RESET]);\r\n  }\r\n  for (let i = min, j = 0; i <= max; i++) {\r\n    while (countArray[i] > 0) {\r\n      animations.push([j, i, SwapType.COPY]);\r\n      j++;\r\n      countArray[i]--;\r\n    }\r\n  }\r\n};\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}