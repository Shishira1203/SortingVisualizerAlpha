{"version":3,"sources":["App.tsx","algorithms/heapSort.ts","algorithms/quickSort.ts","algorithms/mergeSort.ts","algorithms/coutingSort.ts","algorithms/selectionSort.ts","algorithms/insertionSort.ts","algorithms/bubbleSort.ts","reportWebVitals.ts","index.tsx"],"names":["SwapType","buttonType","heapRoot","array","i","arrayLength","animations","left","right","max","height","push","CHANGE_COLOR","RESET","SWAP","temp","quickSortHelper","start","end","pivot","j","piv","COPY","partition","mergeSortHelper","tempArray","mid","Math","floor","k","doMerge","DEFUALT_COLOR","App","useState","arrayBarGraph","setArrayBarGraph","arraySize","setArraySize","animationSpeed","setAnimationSpeed","disabled","setDisabled","animationArray","setAnimationArray","animArrIdx","setAnimArrIdx","timeouts","setTimeouts","PLAY","buttonState","setButtonState","mode","theme","setTheme","isOpen","setIsOpen","currentAlgorithm","setCurrentAlgorithm","GlobalStyle","createGlobalStyle","props","useEffect","buildArray","randomIntFromInterval","color","handleAnimations","newTimeouts","length","setTimeout","PAUSE","newArrayBarGraph","barOneIdx","barTwoIdx","swapType","min","random","heapSort","heapSortHelper","countingSort","countArray","countingSortHelper","selectionSort","minIdx","selectionSortHelper","insertionSort","elementToInsert","insertionSortHelper","bubbleSort","bubbleSortHelper","handleAlgorithms","chosenAlgorithm","split","console","log","currentArray","slice","mergeSort","quickSort","Navbar","dark","expand","className","NavbarBrand","href","style","marginLeft","NavbarToggler","onClick","Collapse","navbar","Nav","NavItem","paddingTop","onChange","checked","size","NavLink","resetArray","cursor","width","minValue","maxValue","value","val","onChangeComplete","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","DropdownMenu","DropdownItem","map","idx","backgroundColor","id","UncontrolledTooltip","placement","target","Button","icon","faPlay","leftAnimations","clearTimeout","pop","faPause","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.db46fd67.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport {\r\n    Navbar,\r\n    NavbarBrand,\r\n    Button,\r\n    UncontrolledTooltip,\r\n    Collapse,\r\n    NavbarToggler,\r\n    Nav,\r\n    NavItem,\r\n    UncontrolledDropdown,\r\n    DropdownToggle,\r\n    DropdownMenu,\r\n    DropdownItem,\r\n    NavLink,\r\n} from \"reactstrap\";\r\nimport \"./App.css\";\r\nimport { heapSortHelper } from \"./algorithms/heapSort\";\r\nimport { countingSortHelper } from \"./algorithms/coutingSort\";\r\nimport { quickSortHelper } from \"./algorithms/quickSort\";\r\nimport { mergeSortHelper } from \"./algorithms/mergeSort\";\r\nimport { selectionSortHelper } from \"./algorithms/selectionSort\";\r\nimport { insertionSortHelper } from \"./algorithms/insertionSort\";\r\nimport { bubbleSortHelper } from \"./algorithms/bubbleSort\";\r\nimport {\r\n    ThemeProvider,\r\n    createGlobalStyle,\r\n    ThemeProps,\r\n} from \"styled-components\";\r\nimport DarkModeToggle from \"react-dark-mode-toggle\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPlay, faPause } from \"@fortawesome/free-solid-svg-icons\";\r\nimport InputRange from \"react-input-range\";\r\nimport \"react-input-range/lib/css/index.css\";\r\n\r\nexport type ArrayBar = {\r\n    height: number;\r\n    color: string;\r\n};\r\n\r\nexport type ThemeType = {\r\n    mode: string;\r\n};\r\n\r\nexport enum SwapType {\r\n    SWAP,\r\n    CHANGE_COLOR,\r\n    RESET,\r\n    COPY,\r\n}\r\n\r\nenum buttonType {\r\n    PLAY,\r\n    PAUSE,\r\n}\r\n\r\nconst DEFUALT_COLOR = \"teal\";\r\nconst SWAP_COLOR = \"red\";\r\n\r\nexport default function App() {\r\n    const [arrayBarGraph, setArrayBarGraph] = useState<Array<ArrayBar>>([]);\r\n    const [arraySize, setArraySize] = useState<number | any>(100);\r\n    const [animationSpeed, setAnimationSpeed] = useState<number | any>(0);\r\n    const [disabled, setDisabled] = useState<boolean>(false);\r\n    const [animationArray, setAnimationArray] = useState<Array<any>>([]);\r\n    const [animArrIdx, setAnimArrIdx] = useState<number>(0);\r\n    const [timeouts, setTimeouts] = useState<Array<any>>([]);\r\n    const [buttonState, setButtonState] = useState<buttonType>(buttonType.PLAY);\r\n    const [theme, setTheme] = useState<ThemeType>({ mode: \"dark\" });\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const [currentAlgorithm, setCurrentAlgorithm] =\r\n        useState<string>(\"Visualize!\");\r\n    const GlobalStyle = createGlobalStyle`\r\n    body{\r\n      background-color: ${(props: ThemeProps<ThemeType>) =>\r\n          props.theme.mode === \"dark\" ? \"#111\" : \"#EEE\"};\r\n      color: ${(props: ThemeProps<ThemeType>) =>\r\n          props.theme.mode === \"dark\" ? \"#111\" : \"#EEE\"};\r\n    }\r\n  `;\r\n\r\n    useEffect(() => {\r\n        const buildArray = [];\r\n        for (let i = 0; i < arraySize; i++)\r\n            buildArray.push({\r\n                height: randomIntFromInterval(5, 500),\r\n                color: DEFUALT_COLOR,\r\n            });\r\n        setArrayBarGraph(buildArray);\r\n    }, [arraySize]);\r\n\r\n    const handleAnimations = () => {\r\n        const newTimeouts: Array<any> = [];\r\n        const animations = [...animationArray];\r\n        for (let i = animArrIdx; i <= animations.length; i++) {\r\n            if (i === animations.length) {\r\n                newTimeouts.push(\r\n                    setTimeout(() => {\r\n                        setTimeouts(newTimeouts);\r\n                        setAnimationArray([]);\r\n                        setButtonState(buttonType.PLAY);\r\n                        setDisabled(false);\r\n                        setAnimArrIdx(0);\r\n                    }, -animationSpeed * (i - animArrIdx)),\r\n                );\r\n                return;\r\n            } else if (i === animArrIdx) {\r\n                setDisabled(true);\r\n                setButtonState(buttonType.PAUSE);\r\n            }\r\n            const newArrayBarGraph = [...arrayBarGraph];\r\n            const [barOneIdx, barTwoIdx, swapType] = animations[i];\r\n            if (swapType === SwapType.SWAP) {\r\n                newTimeouts.push(\r\n                    setTimeout(() => {\r\n                        const temp = newArrayBarGraph[barOneIdx].height;\r\n                        newArrayBarGraph[barOneIdx].height =\r\n                            newArrayBarGraph[barTwoIdx].height;\r\n                        newArrayBarGraph[barTwoIdx].height = temp;\r\n                        setArrayBarGraph(newArrayBarGraph);\r\n                        setTimeouts(newTimeouts);\r\n                        setAnimArrIdx(i);\r\n                    }, -animationSpeed * (i - animArrIdx)),\r\n                );\r\n            } else if (swapType === SwapType.COPY) {\r\n                newTimeouts.push(\r\n                    setTimeout(() => {\r\n                        newArrayBarGraph[barOneIdx].height = barTwoIdx;\r\n                        setArrayBarGraph(newArrayBarGraph);\r\n                        setTimeouts(newTimeouts);\r\n                        setAnimArrIdx(i);\r\n                    }, -animationSpeed * (i - animArrIdx)),\r\n                );\r\n            } else {\r\n                newTimeouts.push(\r\n                    setTimeout(() => {\r\n                        const color =\r\n                            swapType === SwapType.RESET\r\n                                ? DEFUALT_COLOR\r\n                                : SWAP_COLOR;\r\n                        newArrayBarGraph[barOneIdx].color = color;\r\n                        newArrayBarGraph[barTwoIdx].color = color;\r\n                        setArrayBarGraph(newArrayBarGraph);\r\n                        setTimeouts(newTimeouts);\r\n                        setAnimArrIdx(i);\r\n                    }, -animationSpeed * (i - animArrIdx)),\r\n                );\r\n            }\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        handleAnimations();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [animationArray.length]);\r\n\r\n    const randomIntFromInterval = (min: number, max: number) =>\r\n        Math.floor(Math.random() * (max - min + 1) + min);\r\n\r\n    const handleAnimationState = () => {\r\n        setDisabled(false);\r\n        setButtonState(buttonType.PLAY);\r\n        let leftAnimations = [...timeouts];\r\n        while (leftAnimations.length) {\r\n            clearTimeout(leftAnimations.pop());\r\n        }\r\n        setTimeouts([]);\r\n    };\r\n    const resetArray = () => {\r\n        const buildArray = [];\r\n        setAnimationArray([]);\r\n        setAnimArrIdx(0);\r\n        for (let i = 0; i < arraySize; i++)\r\n            buildArray.push({\r\n                height: randomIntFromInterval(5, 500),\r\n                color: DEFUALT_COLOR,\r\n            });\r\n        setArrayBarGraph(buildArray);\r\n    };\r\n\r\n    const heapSort = () => {\r\n        const currentArray = [...arrayBarGraph];\r\n        const animations: Array<any> = [];\r\n        heapSortHelper(currentArray, animations);\r\n        setAnimationArray(animations);\r\n        setAnimArrIdx(0);\r\n    };\r\n\r\n    const countingSort = () => {\r\n        const currentArray = [...arrayBarGraph];\r\n        const animations: Array<any> = [];\r\n        countingSortHelper(currentArray, 1, 700, animations);\r\n        setAnimationArray(animations);\r\n        setAnimArrIdx(0);\r\n    };\r\n\r\n    const quickSort = () => {\r\n        const currentArray = [...arrayBarGraph];\r\n        if (currentArray.length <= 1) return currentArray;\r\n        const animations: Array<any> = [];\r\n        quickSortHelper(currentArray, 0, currentArray.length, animations);\r\n        setAnimationArray(animations);\r\n        setAnimArrIdx(0);\r\n    };\r\n\r\n    const mergeSort = () => {\r\n        const currentArray = [...arrayBarGraph];\r\n        const tempArray = currentArray.slice();\r\n        const animations: Array<any> = [];\r\n        mergeSortHelper(\r\n            currentArray,\r\n            0,\r\n            currentArray.length - 1,\r\n            tempArray,\r\n            animations,\r\n        );\r\n        setAnimationArray(animations);\r\n        setAnimArrIdx(0);\r\n    };\r\n\r\n    const selectionSort = () => {\r\n        const currentArray = [...arrayBarGraph];\r\n        const animations = selectionSortHelper(currentArray);\r\n        setAnimationArray(animations);\r\n        setAnimArrIdx(0);\r\n    };\r\n\r\n    const insertionSort = () => {\r\n        const currentArray = [...arrayBarGraph];\r\n        const animations = insertionSortHelper(currentArray);\r\n        setAnimationArray(animations);\r\n        setAnimArrIdx(0);\r\n    };\r\n\r\n    const bubbleSort = () => {\r\n        const currentArray = [...arrayBarGraph];\r\n        const animations = bubbleSortHelper(currentArray);\r\n        setAnimationArray(animations);\r\n        setAnimArrIdx(0);\r\n    };\r\n\r\n    const handleAlgorithms = () => {\r\n        const cA = currentAlgorithm;\r\n        const chosenAlgorithm = cA.split(\" \");\r\n        if (chosenAlgorithm.length === 1) {\r\n            setCurrentAlgorithm(\"Pick an Algorithm!\");\r\n            return;\r\n        }\r\n        console.log(chosenAlgorithm[1]);\r\n        switch (chosenAlgorithm[1]) {\r\n            case \"Bubble\":\r\n                bubbleSort();\r\n                break;\r\n            case \"Selection\":\r\n                selectionSort();\r\n                break;\r\n            case \"Insertion\":\r\n                insertionSort();\r\n                break;\r\n            case \"Heap\":\r\n                heapSort();\r\n                break;\r\n            case \"Merge\":\r\n                mergeSort();\r\n                break;\r\n            case \"Quick\":\r\n                quickSort();\r\n                break;\r\n            case \"Counting\":\r\n                countingSort();\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            <>\r\n                <GlobalStyle />\r\n                <Navbar\r\n                    color=\"dark\"\r\n                    dark\r\n                    expand=\"md\"\r\n                    className=\"navbar-no-y-padding\"\r\n                >\r\n                    <NavbarBrand\r\n                        href=\"/SortingVisualizerAlpha\"\r\n                        style={{ marginLeft: \"1vw\" }}\r\n                    >\r\n                        SortingVisualizerAlpha\r\n                    </NavbarBrand>\r\n                    <NavbarToggler onClick={() => setIsOpen(!isOpen)} />\r\n                    <Collapse isOpen={isOpen} navbar>\r\n                        <Nav className=\"mr-auto\" navbar>\r\n                            <NavItem\r\n                                className=\"navitem\"\r\n                                style={{ paddingTop: 6 }}\r\n                            >\r\n                                <DarkModeToggle\r\n                                    onChange={() =>\r\n                                        setTheme(\r\n                                            theme.mode === \"dark\"\r\n                                                ? { mode: \"light\" }\r\n                                                : { mode: \"dark\" },\r\n                                        )\r\n                                    }\r\n                                    checked={theme.mode === \"dark\"}\r\n                                    size={50}\r\n                                ></DarkModeToggle>\r\n                            </NavItem>\r\n                            <NavItem className=\"navitem\">\r\n                                <NavLink\r\n                                    onClick={() => resetArray()}\r\n                                    disabled={disabled}\r\n                                    style={{ cursor: \"pointer\" }}\r\n                                >\r\n                                    Generate New Array\r\n                                </NavLink>\r\n                            </NavItem>\r\n                            <NavItem className=\"navitem\">\r\n                                <div\r\n                                    className=\"text-white\"\r\n                                    style={{ width: 150 }}\r\n                                >\r\n                                    Array Length\r\n                                    <InputRange\r\n                                        minValue={2}\r\n                                        maxValue={100}\r\n                                        value={arraySize}\r\n                                        onChange={(val) => {\r\n                                            setArraySize(val);\r\n                                        }}\r\n                                        onChangeComplete={(val) =>\r\n                                            setArraySize(val)\r\n                                        }\r\n                                        disabled={disabled}\r\n                                    ></InputRange>\r\n                                </div>\r\n                            </NavItem>\r\n                            <NavItem className=\"navitem\">\r\n                                <div\r\n                                    className=\"text-white\"\r\n                                    style={{ width: 150 }}\r\n                                >\r\n                                    Animation Speed\r\n                                    <InputRange\r\n                                        minValue={-800}\r\n                                        maxValue={0}\r\n                                        value={animationSpeed}\r\n                                        onChange={(val) => {\r\n                                            setAnimationSpeed(val);\r\n                                        }}\r\n                                        onChangeComplete={(val) => {\r\n                                            setAnimationSpeed(val);\r\n                                        }}\r\n                                        disabled={disabled}\r\n                                    ></InputRange>\r\n                                </div>\r\n                            </NavItem>\r\n                            <UncontrolledDropdown\r\n                                nav\r\n                                inNavbar\r\n                                disabled={disabled}\r\n                            >\r\n                                <DropdownToggle nav caret>\r\n                                    Select an Algorithm\r\n                                </DropdownToggle>\r\n                                <DropdownMenu right color=\"dark\">\r\n                                    <DropdownItem\r\n                                        onClick={() => {\r\n                                            setCurrentAlgorithm(\r\n                                                \"Visualize Bubble Sort!\",\r\n                                            );\r\n                                        }}\r\n                                    >\r\n                                        Bubble Sort\r\n                                    </DropdownItem>\r\n                                    <DropdownItem\r\n                                        onClick={() => {\r\n                                            setCurrentAlgorithm(\r\n                                                \"Visualize Selection Sort!\",\r\n                                            );\r\n                                        }}\r\n                                    >\r\n                                        Selection Sort\r\n                                    </DropdownItem>\r\n                                    <DropdownItem\r\n                                        onClick={() => {\r\n                                            setCurrentAlgorithm(\r\n                                                \"Visualize Insertion Sort!\",\r\n                                            );\r\n                                        }}\r\n                                    >\r\n                                        Insertion Sort\r\n                                    </DropdownItem>\r\n                                    <DropdownItem\r\n                                        onClick={() => {\r\n                                            setCurrentAlgorithm(\r\n                                                \"Visualize Heap Sort!\",\r\n                                            );\r\n                                        }}\r\n                                    >\r\n                                        Heap Sort\r\n                                    </DropdownItem>\r\n                                    <DropdownItem\r\n                                        onClick={() => {\r\n                                            setCurrentAlgorithm(\r\n                                                \"Visualize Merge Sort!\",\r\n                                            );\r\n                                        }}\r\n                                    >\r\n                                        Merge Sort\r\n                                    </DropdownItem>\r\n                                    <DropdownItem\r\n                                        onClick={() => {\r\n                                            setCurrentAlgorithm(\r\n                                                \"Visualize Quick Sort!\",\r\n                                            );\r\n                                        }}\r\n                                    >\r\n                                        Quick Sort\r\n                                    </DropdownItem>\r\n                                </DropdownMenu>\r\n                            </UncontrolledDropdown>\r\n                            <NavItem className=\"navitem\">\r\n                                <NavLink\r\n                                    onClick={() => handleAlgorithms()}\r\n                                    disabled={disabled}\r\n                                    style={{ cursor: \"pointer\" }}\r\n                                >\r\n                                    {currentAlgorithm}\r\n                                </NavLink>\r\n                            </NavItem>\r\n                        </Nav>\r\n                    </Collapse>\r\n                </Navbar>\r\n                <Navbar color=\"dark\"></Navbar>\r\n                <div className=\"array-container\">\r\n                    {arrayBarGraph.map((value, idx) => (\r\n                        <>\r\n                            <div\r\n                                className=\"array-bar-graph\"\r\n                                key={idx}\r\n                                style={{\r\n                                    backgroundColor: value.color,\r\n                                    height: `${value.height}px`,\r\n                                    width: `${1000 / arrayBarGraph.length}px`,\r\n                                }}\r\n                                id={\"tooltip\" + idx}\r\n                            ></div>\r\n                            <UncontrolledTooltip\r\n                                placement=\"top\"\r\n                                target={\"tooltip\" + idx}\r\n                            >\r\n                                {value.height}\r\n                            </UncontrolledTooltip>\r\n                        </>\r\n                    ))}\r\n                </div>\r\n                <div className=\"center-div\">\r\n                    {buttonState === buttonType.PLAY ? (\r\n                        <Button onClick={handleAnimations}>\r\n                            <FontAwesomeIcon icon={faPlay} size=\"lg\" />\r\n                        </Button>\r\n                    ) : (\r\n                        <Button onClick={handleAnimationState}>\r\n                            <FontAwesomeIcon icon={faPause} size=\"lg\" />\r\n                        </Button>\r\n                    )}\r\n                </div>\r\n            </>\r\n        </ThemeProvider>\r\n    );\r\n}\r\n","import { ArrayBar, SwapType } from \"../App\";\r\n\r\nconst heapRoot = (\r\n    array: Array<ArrayBar>,\r\n    i: number,\r\n    arrayLength: number,\r\n    animations: Array<any>,\r\n) => {\r\n    let left = 2 * i + 1;\r\n    let right = 2 * i + 2;\r\n    let max = i;\r\n    if (left < arrayLength && array[left].height > array[max].height) {\r\n        animations.push([left, max, SwapType.CHANGE_COLOR]);\r\n        animations.push([left, max, SwapType.RESET]);\r\n        max = left;\r\n    }\r\n    if (right < arrayLength && array[right].height > array[max].height) {\r\n        animations.push([right, max, SwapType.CHANGE_COLOR]);\r\n        animations.push([right, max, SwapType.RESET]);\r\n        max = right;\r\n    }\r\n    if (max !== i) {\r\n        animations.push([max, i, SwapType.CHANGE_COLOR]);\r\n        animations.push([max, i, SwapType.RESET]);\r\n        animations.push([i, max, SwapType.SWAP]);\r\n        let temp = array[i];\r\n        array[i] = array[max];\r\n        array[max] = temp;\r\n        heapRoot(array, max, arrayLength, animations);\r\n    }\r\n};\r\n\r\nexport const heapSortHelper = (\r\n    array: Array<ArrayBar>,\r\n    animations: Array<any>,\r\n) => {\r\n    let arrayLength = array.length;\r\n    for (let i = Math.floor(arrayLength / 2); i >= 0; i -= 1) {\r\n        heapRoot(array, i, arrayLength, animations);\r\n    }\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n        animations.push([0, i, SwapType.SWAP]);\r\n        let temp = array[0];\r\n        array[0] = array[i];\r\n        array[i] = temp;\r\n        arrayLength--;\r\n        heapRoot(array, 0, arrayLength, animations);\r\n    }\r\n    return animations;\r\n};\r\n","import { ArrayBar, SwapType } from \"../App\";\r\n\r\nconst partition = (\r\n    array: Array<ArrayBar>,\r\n    start: number,\r\n    end: number,\r\n    animations: Array<any>,\r\n) => {\r\n    let i = start,\r\n        j = end;\r\n    let piv = array[start];\r\n    while (i < j) {\r\n        while (i < j && array[--j].height >= piv.height) {\r\n            animations.push([i, j, SwapType.CHANGE_COLOR]);\r\n            animations.push([i, j, SwapType.RESET]);\r\n        }\r\n        if (i < j) {\r\n            animations.push([i, array[j].height, SwapType.COPY]);\r\n            array[i] = array[j];\r\n        }\r\n        while (i < j && array[++i].height <= piv.height) {\r\n            animations.push([i, j, SwapType.CHANGE_COLOR]);\r\n            animations.push([i, j, SwapType.RESET]);\r\n        }\r\n        if (i < j) {\r\n            animations.push([j, array[i].height, SwapType.COPY]);\r\n            array[j] = array[i];\r\n        }\r\n    }\r\n    animations.push([j, piv.height, SwapType.COPY]);\r\n    array[j] = piv;\r\n    return j;\r\n};\r\n\r\nexport const quickSortHelper = (\r\n    array: Array<ArrayBar>,\r\n    start: number,\r\n    end: number,\r\n    animations: Array<any>,\r\n) => {\r\n    if (end - start < 2) return;\r\n    const pivot = partition(array, start, end, animations);\r\n    quickSortHelper(array, start, pivot, animations);\r\n    quickSortHelper(array, pivot + 1, end, animations);\r\n};\r\n","import { ArrayBar, SwapType } from \"../App\";\r\n\r\nconst doMerge = (\r\n    array: Array<ArrayBar>,\r\n    start: number,\r\n    mid: number,\r\n    end: number,\r\n    tempArray: Array<ArrayBar>,\r\n    animations: Array<any>,\r\n) => {\r\n    let k = start;\r\n    let i = start;\r\n    let j = mid + 1;\r\n    while (i <= mid && j <= end) {\r\n        animations.push([i, j, SwapType.CHANGE_COLOR]);\r\n        animations.push([i, j, SwapType.RESET]);\r\n        if (tempArray[i].height <= tempArray[j].height) {\r\n            animations.push([k, i, SwapType.CHANGE_COLOR]);\r\n            animations.push([k, tempArray[i].height, SwapType.COPY]);\r\n            animations.push([k, i, SwapType.RESET]);\r\n            array[k++] = tempArray[i++];\r\n        } else {\r\n            animations.push([k, i, SwapType.CHANGE_COLOR]);\r\n            animations.push([k, tempArray[j].height, SwapType.COPY]);\r\n            animations.push([k, i, SwapType.RESET]);\r\n            array[k++] = tempArray[j++];\r\n        }\r\n    }\r\n    while (i <= mid) {\r\n        animations.push([k, i, SwapType.CHANGE_COLOR]);\r\n        animations.push([k, tempArray[i].height, SwapType.COPY]);\r\n        animations.push([k, i, SwapType.RESET]);\r\n        array[k++] = tempArray[i++];\r\n    }\r\n    while (j <= end) {\r\n        animations.push([k, j, SwapType.CHANGE_COLOR]);\r\n        animations.push([k, tempArray[j].height, SwapType.COPY]);\r\n        animations.push([k, j, SwapType.RESET]);\r\n        array[k++] = tempArray[j++];\r\n    }\r\n};\r\n\r\nexport const mergeSortHelper = (\r\n    array: Array<ArrayBar>,\r\n    start: number,\r\n    end: number,\r\n    tempArray: Array<ArrayBar>,\r\n    animations: Array<any>,\r\n) => {\r\n    if (start === end) return;\r\n    const mid = Math.floor((start + end) / 2);\r\n    mergeSortHelper(tempArray, start, mid, array, animations);\r\n    mergeSortHelper(tempArray, mid + 1, end, array, animations);\r\n    doMerge(array, start, mid, end, tempArray, animations);\r\n};\r\n","import { ArrayBar, SwapType } from \"../App\";\r\n\r\nexport const countingSortHelper = (\r\n    array: Array<ArrayBar>,\r\n    min: number,\r\n    max: number,\r\n    animations: Array<any>,\r\n) => {\r\n    let countArray = [];\r\n    for (let i = min; i <= max; i++) {\r\n        countArray[i] = 0;\r\n    }\r\n    for (let i = 0; i < array.length; i++) {\r\n        countArray[array[i].height]++;\r\n        animations.push([i, i, SwapType.CHANGE_COLOR]);\r\n        animations.push([i, i, SwapType.RESET]);\r\n    }\r\n    for (let i = min, j = 0; i <= max; i++) {\r\n        while (countArray[i] > 0) {\r\n            animations.push([j, i, SwapType.COPY]);\r\n            j++;\r\n            countArray[i]--;\r\n        }\r\n    }\r\n};\r\n","import { ArrayBar, SwapType } from \"../App\";\r\n\r\nexport const selectionSortHelper = (array: Array<ArrayBar>) => {\r\n    const animations: Array<any> = [];\r\n    for (let i = 0; i < array.length - 1; i++) {\r\n        let minIdx = i;\r\n        for (let j = i + 1; j < array.length; j++) {\r\n            animations.push([j, minIdx, SwapType.CHANGE_COLOR]);\r\n            if (array[j].height < array[minIdx].height) minIdx = j;\r\n            animations.push([j, minIdx, SwapType.RESET]);\r\n        }\r\n        animations.push([i, minIdx, SwapType.RESET]);\r\n        let temp = array[minIdx];\r\n        animations.push([minIdx, i, SwapType.SWAP]);\r\n        array[minIdx] = array[i];\r\n        array[i] = temp;\r\n    }\r\n    return animations;\r\n};\r\n","import { ArrayBar, SwapType } from \"../App\";\r\n\r\nexport const insertionSortHelper = (array: Array<ArrayBar>) => {\r\n    const animations = [];\r\n    for (let i = 1; i < array.length; i++) {\r\n        let elementToInsert = array[i];\r\n        let j;\r\n        for (\r\n            j = i;\r\n            j > 0 && array[j - 1].height > elementToInsert.height;\r\n            j--\r\n        ) {\r\n            animations.push([j - 1, j, SwapType.CHANGE_COLOR]);\r\n            array[j] = array[j - 1];\r\n            animations.push([j, array[j - 1].height, SwapType.COPY]);\r\n            animations.push([j - 1, j, SwapType.RESET]);\r\n        }\r\n        animations.push([j, elementToInsert.height, SwapType.COPY]);\r\n        array[j] = elementToInsert;\r\n    }\r\n    return animations;\r\n};\r\n","import { ArrayBar, SwapType } from \"../App\";\r\nexport const bubbleSortHelper = (array: Array<ArrayBar>): Array<any> => {\r\n    const animations = [];\r\n    for (let i = 0; i < array.length - 1; i++) {\r\n        for (let j = 0; j < array.length - i - 1; j++) {\r\n            animations.push([j, j + 1, SwapType.CHANGE_COLOR]);\r\n            if (array[j].height > array[j + 1].height) {\r\n                animations.push([j, j + 1, SwapType.SWAP]);\r\n                const temp = array[j];\r\n                array[j] = array[j + 1];\r\n                array[j + 1] = temp;\r\n            }\r\n            animations.push([j, j + 1, SwapType.RESET]);\r\n        }\r\n    }\r\n    return animations;\r\n};\r\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            },\n        );\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\"),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}