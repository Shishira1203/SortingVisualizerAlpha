{"version":3,"sources":["algorithms/heapSort.ts","algorithms/quickSort.ts","algorithms/mergeSort.ts","App.tsx","algorithms/bubbleSort.ts","algorithms/selectionSort.ts","algorithms/insertionSort.ts","algorithms/coutingSort.ts","reportWebVitals.ts","index.tsx"],"names":["heapRoot","array","i","arrayLength","animations","left","right","max","height","push","temp","quickSortHelper","start","end","pivot","j","piv","partition","mergeSortHelper","tempArray","mid","Math","floor","k","doMerge","DEFUALT_COLOR","App","useState","arrayBarGraph","setArrayBarGraph","arraySize","setArraySize","animationSpeed","setAnimationSpeed","disabled","setDisabled","mode","theme","setTheme","GlobalStyle","createGlobalStyle","props","useEffect","buildArray","randomIntFromInterval","color","min","random","handleAnimations","length","setTimeout","newArrayBarGraph","barOneIdx","barTwoIndexorSwapHeight","swap","reset","heapSort","heapSortHelper","mergeSort","currentArray","slice","Navbar","NavbarBrand","href","className","onChange","checked","size","Button","onClick","resetArray","id","style","width","minValue","maxValue","value","val","onChangeComplete","ButtonGroup","console","log","bubbleSortHelper","bubbleSort","minIdx","selectionSortHelper","selectionSort","elementToInsert","insertionSortHelper","insertionSort","quickSort","countArray","countingSortHelper","countingSort","map","idx","backgroundColor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yPAEMA,G,MAAW,SAAXA,EACJC,EACAC,EACAC,EACAC,GAEA,IAAIC,EAAO,EAAIH,EAAI,EACfI,EAAQ,EAAIJ,EAAI,EAChBK,EAAML,EAWV,GAVIG,EAAOF,GAAeF,EAAMI,GAAMG,OAASP,EAAMM,GAAKC,SACxDJ,EAAWK,KAAK,CAACJ,EAAME,GAAK,GAAO,IACnCH,EAAWK,KAAK,CAACJ,EAAME,GAAK,GAAO,IACnCA,EAAMF,GAEJC,EAAQH,GAAeF,EAAMK,GAAOE,OAASP,EAAMM,GAAKC,SAC1DJ,EAAWK,KAAK,CAACH,EAAOC,GAAK,GAAO,IACpCH,EAAWK,KAAK,CAACH,EAAOC,GAAK,GAAO,IACpCA,EAAMD,GAEJC,IAAQL,EAAG,CACbE,EAAWK,KAAK,CAACF,EAAKL,GAAG,GAAO,IAChCE,EAAWK,KAAK,CAACF,EAAKL,GAAG,GAAO,IAChCE,EAAWK,KAAK,CAACP,EAAGD,EAAMM,GAAKC,QAAQ,GAAM,IAC7CJ,EAAWK,KAAK,CAACF,EAAKN,EAAMM,GAAKC,QAAQ,GAAM,IAC/C,IAAIE,EAAOT,EAAMC,GACjBD,EAAMC,GAAKD,EAAMM,GACjBN,EAAMM,GAAOG,EACbV,EAASC,EAAOM,EAAKJ,EAAaC,MCKzBO,EAAkB,SAAlBA,EACXV,EACAW,EACAC,EACAT,GAEA,KAAIS,EAAMD,EAAQ,GAAlB,CACA,IAAME,EAvCU,SAChBb,EACAW,EACAC,EACAT,GAKA,IAHA,IAAIF,EAAIU,EACNG,EAAIF,EACFG,EAAMf,EAAMW,GACTV,EAAIa,GAAG,CACZ,KAAOb,EAAIa,GAAKd,IAAQc,GAAGP,QAAUQ,EAAIR,QACvCJ,EAAWK,KAAK,CAACP,EAAGa,GAAG,GAAO,IAC9BX,EAAWK,KAAK,CAACP,EAAGa,GAAG,GAAO,IAMhC,IAJIb,EAAIa,IACNX,EAAWK,KAAK,CAACP,EAAGD,EAAMc,GAAGP,QAAQ,GAAM,IAC3CP,EAAMC,GAAKD,EAAMc,IAEZb,EAAIa,GAAKd,IAAQC,GAAGM,QAAUQ,EAAIR,QACvCJ,EAAWK,KAAK,CAACP,EAAGa,GAAG,GAAO,IAC9BX,EAAWK,KAAK,CAACP,EAAGa,GAAG,GAAO,IAE5Bb,EAAIa,IACNX,EAAWK,KAAK,CAACM,EAAGd,EAAMC,GAAGM,QAAQ,GAAM,IAC3CP,EAAMc,GAAKd,EAAMC,IAKrB,OAFAE,EAAWK,KAAK,CAACM,EAAGC,EAAIR,QAAQ,GAAM,IACtCP,EAAMc,GAAKC,EACJD,EAUOE,CAAUhB,EAAOW,EAAOC,EAAKT,GAC3CO,EAAgBV,EAAOW,EAAOE,EAAOV,GACrCO,EAAgBV,EAAOa,EAAQ,EAAGD,EAAKT,KCJ5Bc,EAAkB,SAAlBA,EACXjB,EACAW,EACAC,EACAM,EACAf,GAEA,GAAIQ,IAAUC,EAAd,CACA,IAAMO,EAAMC,KAAKC,OAAOV,EAAQC,GAAO,GACvCK,EAAgBC,EAAWP,EAAOQ,EAAKnB,EAAOG,GAC9Cc,EAAgBC,EAAWC,EAAM,EAAGP,EAAKZ,EAAOG,GA/ClC,SACdH,EACAW,EACAQ,EACAP,EACAM,EACAf,GAKA,IAHA,IAAImB,EAAIX,EACJV,EAAIU,EACJG,EAAIK,EAAM,EACPlB,GAAKkB,GAAOL,GAAKF,GACtBT,EAAWK,KAAK,CAACP,EAAGa,GAAG,GAAO,IAC1BI,EAAUjB,GAAGM,QAAUW,EAAUJ,GAAGP,QACtCJ,EAAWK,KAAK,CAACP,EAAGa,GAAG,GAAO,IAC9BX,EAAWK,KAAK,CAACc,EAAGJ,EAAUjB,GAAGM,QAAQ,GAAM,IAC/CP,EAAMsB,KAAOJ,EAAUjB,OAEvBE,EAAWK,KAAK,CAACP,EAAGa,GAAG,GAAO,IAC9BX,EAAWK,KAAK,CAACc,EAAGJ,EAAUJ,GAAGP,QAAQ,GAAM,IAC/CP,EAAMsB,KAAOJ,EAAUJ,MAG3B,KAAOb,GAAKkB,GACVhB,EAAWK,KAAK,CAACc,EAAGA,GAAG,GAAO,IAC9BnB,EAAWK,KAAK,CAACc,EAAGJ,EAAUjB,GAAGM,QAAQ,GAAM,IAC/CJ,EAAWK,KAAK,CAACc,EAAGA,GAAG,GAAO,IAC9BtB,EAAMsB,KAAOJ,EAAUjB,KAEzB,KAAOa,GAAKF,GACVT,EAAWK,KAAK,CAACc,EAAGA,GAAG,GAAO,IAC9BnB,EAAWK,KAAK,CAACc,EAAGJ,EAAUJ,GAAGP,QAAQ,GAAM,IAC/CJ,EAAWK,KAAK,CAACc,EAAGA,GAAG,GAAO,IAC9BtB,EAAMsB,KAAOJ,EAAUJ,KAezBS,CAAQvB,EAAOW,EAAOQ,EAAKP,EAAKM,EAAWf,K,yDCtBvCqB,EAAgB,OAGP,SAASC,IACtB,MAA0CC,mBAA0B,IAApE,mBAAOC,EAAP,KAAsBC,EAAtB,KACA,EAAkCF,mBAAuB,KAAzD,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAA4CJ,mBAAuB,GAAnE,mBAAOK,EAAP,KAAuBC,EAAvB,KACA,EAAgCN,oBAAkB,GAAlD,mBAAOO,EAAP,KAAiBC,EAAjB,KACA,EAA0BR,mBAAoB,CAAES,KAAM,UAAtD,mBAAOC,EAAP,KAAcC,EAAd,KACMC,EAAcC,YAAH,iGAEO,SAACC,GAAD,MACG,SAArBA,EAAMJ,MAAMD,KAAkB,OAAS,UAChC,SAACK,GAAD,MACc,SAArBA,EAAMJ,MAAMD,KAAkB,OAAS,UAI7CM,qBAAU,WAER,IADA,IAAMC,EAAa,GACVzC,EAAI,EAAGA,EAAI4B,EAAW5B,IAC7ByC,EAAWlC,KAAK,CACdD,OAAQoC,EAAsB,EAAG,KACjCC,MAAOpB,IAEXI,EAAiBc,KAChB,CAACb,IAEJ,IAAMc,EAAwB,SAACE,EAAavC,GAAd,OAC5Bc,KAAKC,MAAMD,KAAK0B,UAAYxC,EAAMuC,EAAM,GAAKA,IAYzCE,EAAmB,SAAC5C,GACxB+B,GAAY,GACZ,IAFmD,eAE1CjC,GACP,GAAIA,IAAME,EAAW6C,OAInB,OAHAC,YAAW,WACTf,GAAY,MACVH,EAAiB9B,GACf,CAAN,UAEF,IAAMiD,EAAgB,YAAOvB,GAC7B,cAA0DxB,EAAWF,GAArE,GAAOkD,EAAP,KAAkBC,EAAlB,KAA2CC,EAA3C,KAAiDC,EAAjD,KACID,EACFJ,YAAW,WACTC,EAAiBC,GAAW5C,OAAS6C,EACrCxB,EAAiBsB,MACfnB,EAAiB9B,GAErBgD,YAAW,WACT,IAAML,EAAQU,EAAQ9B,EA1Db,MA2DT0B,EAAiBC,GAAWP,MAAQA,EACpCM,EAAiBE,GAAyBR,MAAQA,EAClDhB,EAAiBsB,MACfnB,EAAiB9B,IApBhBA,EAAI,EAAGA,GAAKE,EAAW6C,OAAQ/C,IAAK,CAAC,IAAD,IAApCA,GAAoC,oCAyBzCsD,EAAW,WACf,IACMpD,EAAyB,IHjEL,SAC5BH,EACAG,GAGA,IADA,IAAID,EAAcF,EAAMgD,OACf/C,EAAImB,KAAKC,MAAMnB,EAAc,GAAID,GAAK,EAAGA,GAAK,EACrDF,EAASC,EAAOC,EAAGC,EAAaC,GAElC,IAAK,IAAIF,EAAID,EAAMgD,OAAS,EAAG/C,EAAI,EAAGA,IAAK,CACzCE,EAAWK,KAAK,CAAC,EAAGR,EAAMC,GAAGM,QAAQ,GAAM,IAC3CJ,EAAWK,KAAK,CAACP,EAAGD,EAAM,GAAGO,QAAQ,GAAM,IAC3C,IAAIE,EAAOT,EAAM,GACjBA,EAAM,GAAKA,EAAMC,GACjBD,EAAMC,GAAKQ,EACXP,IACAH,EAASC,EAAO,EAAGE,EAAaC,IGmDhCqD,CAFkB,YAAO7B,GAEIxB,GAC7B4C,EAAiB5C,IAiBbsD,EAAY,WAChB,IAAMC,EAAY,YAAO/B,GACnBT,EAAYwC,EAAaC,QACzBxD,EAAyB,GAC/B,GAAIuD,EAAaV,QAAU,EAAG,OAAOU,EACrCzC,EACEyC,EACA,EACAA,EAAaV,OAAS,EACtB9B,EACAf,GAEF4C,EAAiB5C,IAsBnB,OACE,cAAC,IAAD,CAAeiC,MAAOA,EAAtB,SACE,qCACE,cAACE,EAAD,IACA,eAACsB,EAAA,EAAD,CAAQhB,MAAM,OAAd,UACE,cAACiB,EAAA,EAAD,CAAaC,KAAK,IAAIC,UAAU,aAAhC,+BAGA,cAAC,IAAD,CACEC,SAAU,kBACR3B,EACiB,SAAfD,EAAMD,KAAkB,CAAEA,KAAM,SAAY,CAAEA,KAAM,UAGxD8B,QAAwB,SAAf7B,EAAMD,KACf+B,KAAM,KAER,cAACC,EAAA,EAAD,CACEC,QAAS,kBA9GA,WAEjB,IADA,IAAM1B,EAAa,GACVzC,EAAI,EAAGA,EAAI4B,EAAW5B,IAC7ByC,EAAWlC,KAAK,CACdD,OAAQoC,EAAsB,EAAG,KACjCC,MAAOpB,IAEXI,EAAiBc,GAuGM2B,IACfN,UAAU,iCACV9B,SAAUA,EAHZ,gCAOA,sBAAKqC,GAAG,MAAMC,MAAO,CAAEC,MAAO,KAAOT,UAAU,aAA/C,yBAEE,cAAC,IAAD,CACEU,SAAU,EACVC,SAAU,IACVC,MAAO9C,EACPmC,SAAU,SAACY,GACT9C,EAAa8C,IAEfC,iBAAkB,SAACD,GAAD,OAAS9C,EAAa8C,IACxC3C,SAAUA,OAGd,sBAAKqC,GAAG,MAAMC,MAAO,CAAEC,MAAO,KAAOT,UAAU,aAA/C,4BAEE,cAAC,IAAD,CACEU,UAAW,IACXC,SAAU,EACVC,MAAO5C,EACPiC,SAAU,SAACY,GACT5C,EAAkB4C,IAEpBC,iBAAkB,SAACD,GACjB5C,EAAkB4C,IAEpB3C,SAAUA,OAGd,eAAC6C,EAAA,EAAD,WACE,cAACX,EAAA,EAAD,CACEC,QAAS,kBA7DF,WACjB,IAAMV,EAAY,YAAO/B,GACzBoD,QAAQC,IAAIrD,GACZ,IAAMxB,ECjJsB,SAACH,GAE/B,IADA,IAAMG,EAAa,GACVF,EAAI,EAAGA,EAAID,EAAMgD,OAAS,EAAG/C,IACpC,IAAK,IAAIa,EAAI,EAAGA,EAAId,EAAMgD,OAAS/C,EAAI,EAAGa,IAAK,CAE7C,GADAX,EAAWK,KAAK,CAACM,EAAGA,EAAI,GAAG,GAAO,IAC9Bd,EAAMc,GAAGP,OAASP,EAAMc,EAAI,GAAGP,OAAQ,CACzCJ,EAAWK,KAAK,CAACM,EAAGd,EAAMc,EAAI,GAAGP,QAAQ,GAAM,IAC/CJ,EAAWK,KAAK,CAACM,EAAI,EAAGd,EAAMc,GAAGP,QAAQ,GAAM,IAC/C,IAAME,EAAOT,EAAMc,GACnBd,EAAMc,GAAKd,EAAMc,EAAI,GACrBd,EAAMc,EAAI,GAAKL,EAEjBN,EAAWK,KAAK,CAACM,EAAGA,EAAI,GAAG,GAAO,IAGtC,OAAOX,EDkIc8E,CAAiBvB,GACpCX,EAAiB5C,GAyDQ+E,IACfnB,UAAU,iCACV9B,SAAUA,EAHZ,yBAOA,cAACkC,EAAA,EAAD,CACEC,QAAS,kBAhFC,WACpB,IACMjE,EEpIyB,SAACH,GAElC,IADA,IAAMG,EAAyB,GACtBF,EAAI,EAAGA,EAAID,EAAMgD,OAAS,EAAG/C,IAAK,CAEzC,IADA,IAAIkF,EAASlF,EACJa,EAAIb,EAAI,EAAGa,EAAId,EAAMgD,OAAQlC,IACpCX,EAAWK,KAAK,CAACM,EAAGqE,GAAQ,GAAO,IAC/BnF,EAAMc,GAAGP,OAASP,EAAMmF,GAAQ5E,SAAQ4E,EAASrE,GACrDX,EAAWK,KAAK,CAACM,EAAGqE,GAAQ,GAAO,IAErChF,EAAWK,KAAK,CAACP,EAAGkF,GAAQ,GAAO,IACnC,IAAI1E,EAAOT,EAAMmF,GACjBhF,EAAWK,KAAK,CAAC2E,EAAQnF,EAAMC,GAAGM,QAAQ,GAAM,IAChDP,EAAMmF,GAAUnF,EAAMC,GACtBE,EAAWK,KAAK,CAACP,EAAGQ,EAAKF,QAAQ,GAAM,IACvCP,EAAMC,GAAKQ,EAEb,OAAON,EFoHciF,CADD,YAAOzD,IAEzBoB,EAAiB5C,GA6EQkF,IACftB,UAAU,iCACV9B,SAAUA,EAHZ,4BAOA,cAACkC,EAAA,EAAD,CACEC,QAAS,kBAjFC,WACpB,IACMjE,EG1IyB,SAACH,GAElC,IADA,IAAMG,EAAa,GACVF,EAAI,EAAGA,EAAID,EAAMgD,OAAQ/C,IAAK,CACrC,IAAIqF,EAAkBtF,EAAMC,GACxBa,OAAC,EACL,IAAKA,EAAIb,EAAGa,EAAI,GAAKd,EAAMc,EAAI,GAAGP,OAAS+E,EAAgB/E,OAAQO,IACjEX,EAAWK,KAAK,CAACM,EAAI,EAAGA,GAAG,GAAO,IAClCd,EAAMc,GAAKd,EAAMc,EAAI,GACrBX,EAAWK,KAAK,CAACM,EAAGd,EAAMc,EAAI,GAAGP,QAAQ,GAAM,IAC/CJ,EAAWK,KAAK,CAACM,EAAI,EAAGA,GAAG,GAAO,IAEpCX,EAAWK,KAAK,CAACM,EAAGwE,EAAgB/E,QAAQ,GAAM,IAClDP,EAAMc,GAAKwE,EAEb,OAAOnF,EH4HcoF,CADD,YAAO5D,IAEzBoB,EAAiB5C,GA8EQqF,IACfzB,UAAU,iCACV9B,SAAUA,EAHZ,4BAOA,cAACkC,EAAA,EAAD,CACEC,QAAS,kBAAMX,KACfM,UAAU,iCACV9B,SAAUA,EAHZ,wBAOA,cAACkC,EAAA,EAAD,CACEC,QAAS,kBAAMb,KACfQ,UAAU,iCACV9B,SAAUA,EAHZ,uBAOA,cAACkC,EAAA,EAAD,CACEC,QAAS,kBAnIH,WAChB,IAAMV,EAAY,YAAO/B,GACzB,GAAI+B,EAAaV,QAAU,EAAG,OAAOU,EACrC,IAAMvD,EAAyB,GAC/BO,EAAgBgD,EAAc,EAAGA,EAAaV,OAAQ7C,GACtD4C,EAAiB5C,GA8HQsF,IACf1B,UAAU,iCACV9B,SAAUA,EAHZ,wBAOA,cAACkC,EAAA,EAAD,CACEC,QAAS,kBAhJA,WACnB,IACMjE,EIvGwB,SAChCH,EACA6C,EACAvC,GAIA,IAFA,IAAMH,EAAa,GACfuF,EAAa,GACRzF,EAAI4C,EAAK5C,GAAKK,EAAKL,IAC1ByF,EAAWzF,GAAK,EAElB,IAAK,IAAIA,EAAI,EAAGA,EAAID,EAAMgD,OAAQ/C,IAChCyF,EAAW1F,EAAMC,GAAGM,UACpBJ,EAAWK,KAAK,CAACP,EAAGA,GAAG,GAAO,IAC9BE,EAAWK,KAAK,CAACP,EAAGA,GAAG,GAAO,IAEhC,IAAK,IAAIA,EAAI4C,EAAK/B,EAAI,EAAGb,GAAKK,EAAKL,IACjC,KAAOyF,EAAWzF,GAAK,GACrBD,EAAMc,GAAGP,OAASN,EAClBE,EAAWK,KAAK,CAACM,EAAGb,GAAG,GAAM,IAC7Ba,IACA4E,EAAWzF,KAGf,OAAOE,EJgFcwF,CADD,YAAOhE,GAC2B,EAAG,KACvDoB,EAAiB5C,GA6IQyF,IACf7B,UAAU,iCACV9B,SAAUA,EAHZ,iCASJ,qBAAK8B,UAAU,kBAAf,SACGpC,EAAckE,KAAI,SAAClB,EAAOmB,GAAR,OACjB,qBACE/B,UAAU,kBAEVQ,MAAO,CACLwB,gBAAiBpB,EAAM/B,MACvBrC,OAAO,GAAD,OAAKoE,EAAMpE,OAAX,MACNiE,MAAM,GAAD,OAAK,IAAO7C,EAAcqB,OAA1B,QAJF8C,aKjQnB,IAYeE,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e5068bb4.chunk.js","sourcesContent":["import { ArrayBar } from \"../App\";\r\n\r\nconst heapRoot = (\r\n  array: Array<ArrayBar>,\r\n  i: number,\r\n  arrayLength: number,\r\n  animations: Array<any>\r\n) => {\r\n  let left = 2 * i + 1;\r\n  let right = 2 * i + 2;\r\n  let max = i;\r\n  if (left < arrayLength && array[left].height > array[max].height) {\r\n    animations.push([left, max, false, false]);\r\n    animations.push([left, max, false, true]);\r\n    max = left;\r\n  }\r\n  if (right < arrayLength && array[right].height > array[max].height) {\r\n    animations.push([right, max, false, false]);\r\n    animations.push([right, max, false, true]);\r\n    max = right;\r\n  }\r\n  if (max !== i) {\r\n    animations.push([max, i, false, false]);\r\n    animations.push([max, i, false, true]);\r\n    animations.push([i, array[max].height, true, false]);\r\n    animations.push([max, array[max].height, true, false]);\r\n    let temp = array[i];\r\n    array[i] = array[max];\r\n    array[max] = temp;\r\n    heapRoot(array, max, arrayLength, animations);\r\n  }\r\n};\r\n\r\nexport const heapSortHelper = (\r\n  array: Array<ArrayBar>,\r\n  animations: Array<any>\r\n) => {\r\n  let arrayLength = array.length;\r\n  for (let i = Math.floor(arrayLength / 2); i >= 0; i -= 1) {\r\n    heapRoot(array, i, arrayLength, animations);\r\n  }\r\n  for (let i = array.length - 1; i > 0; i--) {\r\n    animations.push([0, array[i].height, true, false]);\r\n    animations.push([i, array[0].height, true, false]);\r\n    let temp = array[0];\r\n    array[0] = array[i];\r\n    array[i] = temp;\r\n    arrayLength--;\r\n    heapRoot(array, 0, arrayLength, animations);\r\n  }\r\n  return animations;\r\n};\r\n","import { ArrayBar } from \"../App\";\r\n\r\nconst partition = (\r\n  array: Array<ArrayBar>,\r\n  start: number,\r\n  end: number,\r\n  animations: Array<any>\r\n) => {\r\n  let i = start,\r\n    j = end;\r\n  let piv = array[start];\r\n  while (i < j) {\r\n    while (i < j && array[--j].height >= piv.height) {\r\n      animations.push([i, j, false, false]);\r\n      animations.push([i, j, false, true]);\r\n    }\r\n    if (i < j) {\r\n      animations.push([i, array[j].height, true, false]);\r\n      array[i] = array[j];\r\n    }\r\n    while (i < j && array[++i].height <= piv.height) {\r\n      animations.push([i, j, false, false]);\r\n      animations.push([i, j, false, true]);\r\n    }\r\n    if (i < j) {\r\n      animations.push([j, array[i].height, true, false]);\r\n      array[j] = array[i];\r\n    }\r\n  }\r\n  animations.push([j, piv.height, true, false]);\r\n  array[j] = piv;\r\n  return j;\r\n};\r\n\r\nexport const quickSortHelper = (\r\n  array: Array<ArrayBar>,\r\n  start: number,\r\n  end: number,\r\n  animations: Array<any>\r\n) => {\r\n  if (end - start < 2) return;\r\n  const pivot = partition(array, start, end, animations);\r\n  quickSortHelper(array, start, pivot, animations);\r\n  quickSortHelper(array, pivot + 1, end, animations);\r\n};\r\n","import { ArrayBar } from \"../App\";\r\n\r\nconst doMerge = (\r\n  array: Array<ArrayBar>,\r\n  start: number,\r\n  mid: number,\r\n  end: number,\r\n  tempArray: Array<ArrayBar>,\r\n  animations: Array<any>\r\n) => {\r\n  let k = start;\r\n  let i = start;\r\n  let j = mid + 1;\r\n  while (i <= mid && j <= end) {\r\n    animations.push([i, j, false, false]);\r\n    if (tempArray[i].height <= tempArray[j].height) {\r\n      animations.push([i, j, false, true]);\r\n      animations.push([k, tempArray[i].height, true, false]);\r\n      array[k++] = tempArray[i++];\r\n    } else {\r\n      animations.push([i, j, false, true]);\r\n      animations.push([k, tempArray[j].height, true, false]);\r\n      array[k++] = tempArray[j++];\r\n    }\r\n  }\r\n  while (i <= mid) {\r\n    animations.push([k, k, false, false]);\r\n    animations.push([k, tempArray[i].height, true, false]);\r\n    animations.push([k, k, false, true]);\r\n    array[k++] = tempArray[i++];\r\n  }\r\n  while (j <= end) {\r\n    animations.push([k, k, false, false]);\r\n    animations.push([k, tempArray[j].height, true, false]);\r\n    animations.push([k, k, false, true]);\r\n    array[k++] = tempArray[j++];\r\n  }\r\n};\r\n\r\nexport const mergeSortHelper = (\r\n  array: Array<ArrayBar>,\r\n  start: number,\r\n  end: number,\r\n  tempArray: Array<ArrayBar>,\r\n  animations: Array<any>\r\n) => {\r\n  if (start === end) return;\r\n  const mid = Math.floor((start + end) / 2);\r\n  mergeSortHelper(tempArray, start, mid, array, animations);\r\n  mergeSortHelper(tempArray, mid + 1, end, array, animations);\r\n  doMerge(array, start, mid, end, tempArray, animations);\r\n};\r\n","import { useEffect, useState } from \"react\";\nimport { Navbar, NavbarBrand, Button, ButtonGroup } from \"reactstrap\";\nimport \"./App.css\";\nimport { heapSortHelper } from \"./algorithms/heapSort\";\nimport { countingSortHelper } from \"./algorithms/coutingSort\";\nimport { quickSortHelper } from \"./algorithms/quickSort\";\nimport { mergeSortHelper } from \"./algorithms/mergeSort\";\nimport { selectionSortHelper } from \"./algorithms/selectionSort\";\nimport { insertionSortHelper } from \"./algorithms/insertionSort\";\nimport { bubbleSortHelper } from \"./algorithms/bubbleSort\";\nimport {\n  ThemeProvider,\n  createGlobalStyle,\n  ThemeProps,\n} from \"styled-components\";\nimport DarkModeToggle from \"react-dark-mode-toggle\";\nimport InputRange from \"react-input-range\";\nimport \"react-input-range/lib/css/index.css\";\n\nexport type ArrayBar = {\n  height: number;\n  color: string;\n};\n\nexport type ThemeType = {\n  mode: string;\n};\n\nconst DEFUALT_COLOR = \"teal\";\nconst SWAP_COLOR = \"red\";\n\nexport default function App() {\n  const [arrayBarGraph, setArrayBarGraph] = useState<Array<ArrayBar>>([]);\n  const [arraySize, setArraySize] = useState<number | any>(100);\n  const [animationSpeed, setAnimationSpeed] = useState<number | any>(0);\n  const [disabled, setDisabled] = useState<boolean>(false);\n  const [theme, setTheme] = useState<ThemeType>({ mode: \"light\" });\n  const GlobalStyle = createGlobalStyle`\n    body{\n      background-color: ${(props: ThemeProps<ThemeType>) =>\n        props.theme.mode === \"dark\" ? \"#111\" : \"#EEE\"};\n      color: ${(props: ThemeProps<ThemeType>) =>\n        props.theme.mode === \"dark\" ? \"#111\" : \"#EEE\"};\n    }\n  `;\n\n  useEffect(() => {\n    const buildArray = [];\n    for (let i = 0; i < arraySize; i++)\n      buildArray.push({\n        height: randomIntFromInterval(5, 500),\n        color: DEFUALT_COLOR,\n      });\n    setArrayBarGraph(buildArray);\n  }, [arraySize]);\n\n  const randomIntFromInterval = (min: number, max: number) =>\n    Math.floor(Math.random() * (max - min + 1) + min);\n\n  const resetArray = () => {\n    const buildArray = [];\n    for (let i = 0; i < arraySize; i++)\n      buildArray.push({\n        height: randomIntFromInterval(5, 500),\n        color: DEFUALT_COLOR,\n      });\n    setArrayBarGraph(buildArray);\n  };\n\n  const handleAnimations = (animations: Array<any>) => {\n    setDisabled(true);\n    for (let i = 0; i <= animations.length; i++) {\n      if (i === animations.length) {\n        setTimeout(() => {\n          setDisabled(false);\n        }, -animationSpeed * i);\n        return;\n      }\n      const newArrayBarGraph = [...arrayBarGraph];\n      const [barOneIdx, barTwoIndexorSwapHeight, swap, reset] = animations[i];\n      if (swap) {\n        setTimeout(() => {\n          newArrayBarGraph[barOneIdx].height = barTwoIndexorSwapHeight;\n          setArrayBarGraph(newArrayBarGraph);\n        }, -animationSpeed * i);\n      } else {\n        setTimeout(() => {\n          const color = reset ? DEFUALT_COLOR : SWAP_COLOR;\n          newArrayBarGraph[barOneIdx].color = color;\n          newArrayBarGraph[barTwoIndexorSwapHeight].color = color;\n          setArrayBarGraph(newArrayBarGraph);\n        }, -animationSpeed * i);\n      }\n    }\n  };\n\n  const heapSort = () => {\n    const currentArray = [...arrayBarGraph];\n    const animations: Array<any> = [];\n    heapSortHelper(currentArray, animations);\n    handleAnimations(animations);\n  };\n\n  const countingSort = () => {\n    const currentArray = [...arrayBarGraph];\n    const animations = countingSortHelper(currentArray, 1, 700);\n    handleAnimations(animations);\n  };\n\n  const quickSort = () => {\n    const currentArray = [...arrayBarGraph];\n    if (currentArray.length <= 1) return currentArray;\n    const animations: Array<any> = [];\n    quickSortHelper(currentArray, 0, currentArray.length, animations);\n    handleAnimations(animations);\n  };\n\n  const mergeSort = () => {\n    const currentArray = [...arrayBarGraph];\n    const tempArray = currentArray.slice();\n    const animations: Array<any> = [];\n    if (currentArray.length <= 1) return currentArray;\n    mergeSortHelper(\n      currentArray,\n      0,\n      currentArray.length - 1,\n      tempArray,\n      animations\n    );\n    handleAnimations(animations);\n  };\n\n  const selectionSort = () => {\n    const currentArray = [...arrayBarGraph];\n    const animations = selectionSortHelper(currentArray);\n    handleAnimations(animations);\n  };\n\n  const insertionSort = () => {\n    const currentArray = [...arrayBarGraph];\n    const animations = insertionSortHelper(currentArray);\n    handleAnimations(animations);\n  };\n\n  const bubbleSort = () => {\n    const currentArray = [...arrayBarGraph];\n    console.log(arrayBarGraph);\n    const animations = bubbleSortHelper(currentArray);\n    handleAnimations(animations);\n  };\n\n  return (\n    <ThemeProvider theme={theme}>\n      <>\n        <GlobalStyle />\n        <Navbar color=\"dark\">\n          <NavbarBrand href=\"/\" className=\"text-white\">\n            SortingVisualizer\n          </NavbarBrand>\n          <DarkModeToggle\n            onChange={() =>\n              setTheme(\n                theme.mode === \"dark\" ? { mode: \"light\" } : { mode: \"dark\" }\n              )\n            }\n            checked={theme.mode === \"dark\"}\n            size={70}\n          ></DarkModeToggle>\n          <Button\n            onClick={() => resetArray()}\n            className=\"btn bg-transparent  text-white\"\n            disabled={disabled}\n          >\n            Generate New Array\n          </Button>\n          <div id=\"len\" style={{ width: 150 }} className=\"text-white\">\n            Array Length\n            <InputRange\n              minValue={2}\n              maxValue={100}\n              value={arraySize}\n              onChange={(val) => {\n                setArraySize(val);\n              }}\n              onChangeComplete={(val) => setArraySize(val)}\n              disabled={disabled}\n            ></InputRange>\n          </div>\n          <div id=\"ani\" style={{ width: 150 }} className=\"text-white\">\n            Animation Speed\n            <InputRange\n              minValue={-100}\n              maxValue={0}\n              value={animationSpeed}\n              onChange={(val) => {\n                setAnimationSpeed(val);\n              }}\n              onChangeComplete={(val) => {\n                setAnimationSpeed(val);\n              }}\n              disabled={disabled}\n            ></InputRange>\n          </div>\n          <ButtonGroup>\n            <Button\n              onClick={() => bubbleSort()}\n              className=\"btn bg-transparent  text-white\"\n              disabled={disabled}\n            >\n              Bubble Sort\n            </Button>\n            <Button\n              onClick={() => selectionSort()}\n              className=\"btn bg-transparent  text-white\"\n              disabled={disabled}\n            >\n              Selection Sort\n            </Button>\n            <Button\n              onClick={() => insertionSort()}\n              className=\"btn bg-transparent  text-white\"\n              disabled={disabled}\n            >\n              Insertion Sort\n            </Button>\n            <Button\n              onClick={() => mergeSort()}\n              className=\"btn bg-transparent  text-white\"\n              disabled={disabled}\n            >\n              Merge Sort\n            </Button>\n            <Button\n              onClick={() => heapSort()}\n              className=\"btn bg-transparent  text-white\"\n              disabled={disabled}\n            >\n              Heap Sort\n            </Button>\n            <Button\n              onClick={() => quickSort()}\n              className=\"btn bg-transparent  text-white\"\n              disabled={disabled}\n            >\n              Quick Sort\n            </Button>\n            <Button\n              onClick={() => countingSort()}\n              className=\"btn bg-transparent  text-white\"\n              disabled={disabled}\n            >\n              Counting Sort\n            </Button>\n          </ButtonGroup>\n        </Navbar>\n        <div className=\"array-container\">\n          {arrayBarGraph.map((value, idx) => (\n            <div\n              className=\"array-bar-graph\"\n              key={idx}\n              style={{\n                backgroundColor: value.color,\n                height: `${value.height}px`,\n                width: `${1000 / arrayBarGraph.length}px`,\n              }}\n            ></div>\n          ))}\n        </div>\n      </>\n    </ThemeProvider>\n  );\n}\n","import { ArrayBar } from \"../App\";\r\n\r\nexport const bubbleSortHelper = (array: Array<ArrayBar>) => {\r\n  const animations = [];\r\n  for (let i = 0; i < array.length - 1; i++) {\r\n    for (let j = 0; j < array.length - i - 1; j++) {\r\n      animations.push([j, j + 1, false, false]);\r\n      if (array[j].height > array[j + 1].height) {\r\n        animations.push([j, array[j + 1].height, true, false]);\r\n        animations.push([j + 1, array[j].height, true, false]);\r\n        const temp = array[j];\r\n        array[j] = array[j + 1];\r\n        array[j + 1] = temp;\r\n      }\r\n      animations.push([j, j + 1, false, true]);\r\n    }\r\n  }\r\n  return animations;\r\n};\r\n","import { ArrayBar } from \"../App\";\r\n\r\nexport const selectionSortHelper = (array: Array<ArrayBar>) => {\r\n  const animations: Array<any> = [];\r\n  for (let i = 0; i < array.length - 1; i++) {\r\n    let minIdx = i;\r\n    for (let j = i + 1; j < array.length; j++) {\r\n      animations.push([j, minIdx, false, false]);\r\n      if (array[j].height < array[minIdx].height) minIdx = j;\r\n      animations.push([j, minIdx, false, true]);\r\n    }\r\n    animations.push([i, minIdx, false, true]);\r\n    let temp = array[minIdx];\r\n    animations.push([minIdx, array[i].height, true, false]);\r\n    array[minIdx] = array[i];\r\n    animations.push([i, temp.height, true, false]);\r\n    array[i] = temp;\r\n  }\r\n  return animations;\r\n};\r\n","import { ArrayBar } from \"../App\";\r\n\r\nexport const insertionSortHelper = (array: Array<ArrayBar>) => {\r\n  const animations = [];\r\n  for (let i = 1; i < array.length; i++) {\r\n    let elementToInsert = array[i];\r\n    let j;\r\n    for (j = i; j > 0 && array[j - 1].height > elementToInsert.height; j--) {\r\n      animations.push([j - 1, j, false, false]);\r\n      array[j] = array[j - 1];\r\n      animations.push([j, array[j - 1].height, true, false]);\r\n      animations.push([j - 1, j, false, true]);\r\n    }\r\n    animations.push([j, elementToInsert.height, true, false]);\r\n    array[j] = elementToInsert;\r\n  }\r\n  return animations;\r\n};\r\n","import { ArrayBar } from \"../App\";\r\n\r\nexport const countingSortHelper = (\r\n  array: Array<ArrayBar>,\r\n  min: number,\r\n  max: number\r\n) => {\r\n  const animations = [];\r\n  let countArray = [];\r\n  for (let i = min; i <= max; i++) {\r\n    countArray[i] = 0;\r\n  }\r\n  for (let i = 0; i < array.length; i++) {\r\n    countArray[array[i].height]++;\r\n    animations.push([i, i, false, false]);\r\n    animations.push([i, i, false, true]);\r\n  }\r\n  for (let i = min, j = 0; i <= max; i++) {\r\n    while (countArray[i] > 0) {\r\n      array[j].height = i;\r\n      animations.push([j, i, true, false]);\r\n      j++;\r\n      countArray[i]--;\r\n    }\r\n  }\r\n  return animations;\r\n};\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}